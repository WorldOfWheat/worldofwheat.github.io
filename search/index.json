[{"content":"在 2023 年二月份的時候我第一次知道 Docker 這個神器之後我就開始仔細的研究，但在某一次我發現到裡面的文件可以設定的權限跟網路上說的不一樣，在研究過後我才知道原來是 NTFS 這個格式搞的鬼，因為 Linux 預設都是裝在 ex 家族的檔案格式上，再加上看到了這篇文章就決定裝個真的 Linux 來玩玩，但玩著玩著就發現其實平常用用也無不可啊，不知不覺就用了一整年了！\nLinux 我覺得不是一個大家都適合的作業系統，因為使用上或多或少都會有需要處理的複雜問題，而且使用的時候是需要學習的。大家在第一次接觸到電腦的時候應該只要在其它會的人稍微的講個幾分鐘應該就能做到很多事，要看個影片、查個資料應該都不是難事，但 Linux 非常的不同，從一開始的安裝到實際上使用，再到更多進階的應用例如架設伺服器等等，都有很多的知識需要學習，這也是很多人常常會說為什麼 Linux 這麼難用、很多事都做不了的原因。\n初見面 第一次安裝 Linux 的時候其實沒有什麼特別的事，但這是因為我並沒有特別去學習相關的知識，因為 Linux Mint 給我的感覺就像是 Windows 一樣只是換成了 Linux 而以。安裝的一開始就有一個選項特別的吸引我「加密家目錄」，因為我並沒有特別去研究這個是什麼，所以就很高興的勾下去了。安裝完之後我用了幾天一切都很順暢，但因為先前我使用的是 Windows 10，因此有很多的資料要轉移、有很多東西要習慣，在東西搬完之後我就決定把 Windows 刪掉，結果在我把分區刪掉之後我的 Linux 就開不起來了！？\n第一個嚴重的問題在我用了一星期就出現了，怎麼樣都開不起我的 Linux，這個時候我就想到我用一個隨身碟裝個簡易的系統把資料救出來，但記得我安裝的時候勾的那個「加密家目錄」嗎？一開始我並沒有想到，直到我到了 /home/worldofwheat 這個目錄我就發現不太對，為什麼裡面只有一個 .ecryptfs 資料夾？我才突然想到我的資料夾被加密了，這個時候我就馬上找解決辦法，花了我三四個小時才把我的資料救出來，而過程全部都是透過終端機操作，這大該也是我第一次在全終端機的介面上完成一件事，這裡我也建議如果第一次使用 Linux Mint 這個系統的人就別開加密了，處理起來相當的麻煩。\n往後我就開始練習終端機，因為在以前的作業系統一切都是圖形化介面，做什麼事都要先想到從哪裡開始點、接下來要點什麼，而在 Linux 則開始一切都要在終端機上面進行，雖然說在 Linux Mint 也可以找到一些對應的操作，網路上的教學一切都是以終端機操作為主但這不是一件很簡單的事。\n那些讓我印象深刻的事 首先分享的是我花了最久才理解的東西「開機磁區」，這個其實就是我一開始 Linux 無法開機的原因，而當初我其實也有猜到是磁區被我用壞了，但我也不知道怎麼解決這個問題，但這個問題我在後面裝雙系統又遇到了一兩次，其實算是一個讓我感到滿煩燥的問題，後來我的解決方法都是使用 Linux Mint 啟動碟的「Boot Repair」這個功能來做到修復，但就算有了這個功能我還是要修很多次才能成功。\n接著分享一個很怪的案例，在我安裝了某個奇怪的程式之後就發現了垃圾桶比我權限還要大的狀況，下圖為先前的截圖，這裡就可以帶到個 Linux 的檔案系統跟 Windows 差別很大的地方，一般來說在 Windows 不太會去在意檔案權限的部分，反正就我一個人在用而以通常也不會去特別設定，頂多就來個隱藏檔案，但在 Linux 每個檔案和資料夾都有分為 r w x 三個屬性分別為讀、寫、執行，並且是經常變更的屬性，但這部分也就不再贅述，如果有興趣再自行研究。 在 Linux 上如果你安裝的不是基於 Debian 的應該會覺得很痛苦，因為在 Windows 上面天天在用的程式突然變的超級難安裝，甚至可能直接沒有對應的版本，這個是讓最回到 Windows 而不使用 Linux 的原因，但因為我選用的版本就是基於 Debian 的，而且 Mint 還有內建的商店，因此想要什麼應用程式只要簡單的安裝即可，而且還可以開啟自動更新，但仍然有一些被我認為十分「頑強」的應用程式就是死都不上架，我目前覺得最麻煩的一定是 Discord，因為每次都不會自動更新，再加上我還要安裝 Vencord，因此每次安裝都要花掉很多時間，但是不更新又不給用，真的是很煩的事。大部分在 Windows 的應用程式都可以試試看 Wine 這款轉譯器，雖然我有試成功的軟體不多，但如果你有在 Steam 上面玩遊戲，也可以直接開啟 Steam 特製轉譯器就可以玩很多的不支援 Linux 的遊戲，但我必需要說效能沒有到很好，大該就打個八折這樣。\n想入坑 Linux 前請先想好 如果今天你是一名在 Windows 上使用了多年的使用者（像我一樣），那你想要切換到 Linux 應該不會是什麼很難的事，因為在前人的努力下很多功能已經很人性化而且操作跟 Windows 也不會差到哪裡，但就算在怎麼像還是有些事情需要終端機的幫忙，如果你是無法接受調個設定都需要靠文字才能解決的話，那我覺得使用上你應該會覺得滿痛苦的。以我自己為例轉換最痛苦的還是終端機，而且加上我自己有在研究伺服器架設等等課題，因此經常需要去編輯系統的檔案，但是偏偏 Linux 的檔案目錄又跟 Windows 完全不一樣，所以一開始就常常出現找不到哪個東西放在哪個目錄的狀況。\n如果今天你對於電腦十分的不熟悉，例如打開 Word 並且存檔都有困難的話，那我十分的不推薦 Linux 這套作業系統，除非你決定花費比平常人多的時間來學習，而且我不覺得剛接觸到電腦的人會覺得終端機是一件很簡單的事，在理解了之後其實滿簡單的，但操作上非常的不直覺，可能你需要先在 Windows 上練習一段時間再轉換跑道會比較容易。\n關於學習 Linux 讓人又愛又恨的點就是要學的東西很多，常常卡了半天的問題在學習完一些知識之後就能\n","date":"2024-09-16T00:00:00+08:00","permalink":"https://worldofwheat.github.io/p/%E9%97%9C%E6%96%BC%E6%88%91%E4%BD%BF%E7%94%A8%E4%BA%86-linux-%E4%B8%80%E6%95%B4%E5%B9%B4%E7%9A%84%E5%BF%83%E5%BE%97/","title":"關於我使用了 Linux 一整年的心得"},{"content":"相信大家在去如火車站之類的地方都會發現到很多免費的網路，這個時候心動的點下去之後卻跳出了一個登入畫面，一般來說需要輸入身份證之類的資料才能使用。\n上面提到的就是所謂的強制門戶（Captive Portal），這個功能是讓使用者驗證的階段改用網頁來進行，因為透過網頁就可以做到同一組帳號密碼在任何地方都能登入的功能，這跟大家在家裡使用的密碼登入的原理不同，前者是先讓使用者連接再驗證而後者是先驗證密碼再讓人連接。\n事先聲明 本篇教學提到的任何漏洞僅用於教學，不得用於非法用途 所有的測試不保證在所有的環境皆可使用，僅在我本人的電腦上測試成功 在實驗前我需要準備什麼？ 軟體跟硬體在這次的實驗都有需要準備的東西，而且我建議你需要有一定的基礎網路知識再開始學習，因為我不對再對一些基本的知識做解釋。\n硬體 一台主機 可以是電腦、樹苺派等，但是我推薦使用 Linux 作業系統，Windows 理論上也做到的但我沒有實驗過 一台可以連接 Wi-Fi 的設備 用於測試，我推薦使用 Android、Windows、iOS 方便測試 一台 AP 可以不用是無線路由器，也可以是無線網卡，但是需要注意在生產環境上我不推薦使用無線網卡 軟體 因為我本人僅在 kali Linux 上實驗，因此我不提供其它作業系統的軟體，如果有需要請自行到網路上尋找\niptables 核心部份，用於做 NAT Dnsmasq 因為要觸發 Captive Portal 需要有 DNS 的協助，可以使用其它 DNS 伺服器軟體 本次實驗因為使用了無線網卡，因此在 Linux 需要手動做 DHCP，而 Dnsmasq 剛好有 DHCP 的功能 web server 需要準備一個用於驗證使用者的網頁，本次實驗使用 flask 這部分也是最核心的部分，驗證和一般的網頁服務沒有差別 hostapd 這次的實驗我使用了 TL-WN722N 這款無線網卡做為熱點，你可以選擇任何可以做到熱點功能的網卡，在生產環境中我不推薦使用無線網卡，應該使用無路路由器 強制門戶是怎麼做到的？ 當一台手機連接到帶有 Captive Portal 的 AP 時，手機會先發起一條 DNS 請求，這條 DNS 請求一般來說會解析到一個事先約定好的網站，而當 AP 需要驗證或者不可用的時候則會返回其它的結果，手機也是靠這點做到判斷一個熱點有沒有網路及需不需要驗證。當 DNS 請求被解析後如果網站並非手機預其的網站則會將使用者跳轉到 Captive Portal，此時只需要驗證成功就可以連上網路。\n需要注意到提供驗證的網頁不可為 HTTPS，因為手機預期的域名和登入畫面上的憑證不同，因此會出現網站不安全的狀況。\n技術細節 上敘提到的 DNS 請求在不同的裝置上也有所不同，下方是常見的 DNS 請求列表：\nclients3.google.com connectivitycheck.gstatic.com connectivitycheck.android.com detectportal.firefox.com www.msftncsi.com captive.apple.com 上面那些域名就是每個不同的系統用來判斷是否可以連線及是否有 Captive Portal 的基準，因此想要觸發強制門戶的方法就是透過 iptables 的 NAT 表中的 PREROUTING 鏈做到的，因為 DNS 是明文請求，因此只需要目標為 53 號端口的連結指向到 DNS 伺服器就可以做到重定向，而這裡的 DNS 伺服器需要自行架設，這次的實驗使用 Dnsmasq。\n開始實驗吧 我假設大家都已經準備好了軟硬體，因此這邊我就直接跳過安裝階段\n將要用來處理驗證的介面卡準備好，可以是無線網卡或者路由器，接著將介面卡指定一個 IP，需要注意這裡的子網域應該要是 /24 才能分配給其它連入的裝置 IP\n這次實驗我使用的是無線網卡，hostapd 範例 先準備好 iptables，下方我提供一個我寫的範例，我強烈建議將註解讀一篇，在理解了之後才能在自己的主機上也做出一樣的效果\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #!bin/sh # 下面兩個是最主要的變數 # INTERFACE 代表的是 AP 的介面，不論這邊使用的是無線網卡還是路由器都是一樣的 # WEBSERVER 代表的是提供驗證的網頁伺服器，要確定是可以連接到的 INTERFACE=wlan0 WEBSERVER=192.168.0.68 # 下面四條會把 filter 和 nat 表完全清空，實驗為了方便才會清空，執行前請特別注意 iptables -t filter -F iptables -t nat -F iptables -t filter -X iptables -t nat -X # FORWARD 鏈預設設為 DROP # 這步非常的重要，否則就會發生未經驗證，但是卻可以透過 IP 直接對外連接的狀況。實際上的表現為有些時候可以連接有些時候不行 iptables -P FORWARD DROP # AUTHORIZED 這條鏈用於新增已經驗證的使用者 iptables -N AUTHORIZED # 當使用者發送封包的時候先到 AUTHORIZED 檢查，如果未經驗證的話則會往下一條 iptables -A FORWARD -i $INTERFACE -j AUTHORIZED # 放行所有由介面卡流出的封包，因為在輸入已經做到管制，因此輸出一般來說不就做管制 iptables -A FORWARD -o $INTERFACE -j ACCEPT # AUTHORIZED 這條鏈用於新增已經驗證的使用者 # 需要注意 filter 和 nat 的鏈不共用 iptables -t nat -N AUTHORIZED # 將已經驗證的使用者跳過 DNS 重定向 iptables -t nat -A PREROUTING -i $INTERFACE -j AUTHORIZED # 如果前一翛規則還沒驗證通過則進行 DNS 自定向 iptables -t nat -A PREROUTING -i $INTERFACE -p udp --dport 53 -j DNAT --to-destination $WEBSERVER:53 # 因為實驗中的主要透過 eth0 來連入外網，因此需要做 SNAT 才能連上外網 iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE 準備好 Dnsmasq，下面我一樣寫了一個範例，如果你使用自己的 DNS 軟體再自行研究 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # 指定介面卡，這裡的介面卡和第一步的介面卡相同 interface=wlan0 # 要監聽哪個 IP，和第一步的指配給介面卡的 IP 相同 listen-address=10.1.0.1 # 設定分配的連入裝置的 IP 子網域 dhcp-range=10.1.0.2,10.1.0.254,1h # 設定分配的連入裝置的 IP 子網域遮罩 dhcp-option=1,255.255.255.0 # 設定分配的連入裝置的預設 DNS 伺服器，需要注意這裡的 DNS 不可以是用於重定向的伺服器，否則會造成設備強制門戶偵測錯誤 dhcp-option=6,1.1.1.1 # DNS 監聽埠號 port=53 # 下面代表將 Captive Portal 偵測用的域名重定向到自己的 DNS 伺服器 # 下面三個是 Android 的偵測域名，別的廠排可能會有別的域名，這點再自行測試 address=/clients3.google.com/10.1.0.1 address=/connectivitycheck.gstatic.com/10.1.0.1 address=/connectivitycheck.android.com/10.1.0.1 # 下面為 Firefox 瀏覽器的偵測域名 address=/detectportal.firefox.com/10.1.0.1 # 下面為 Windows 的偵測域名 address=/www.msftncsi.com/10.1.0.1 # 下面為 Apple 產品的偵測域名 address=/captive.apple.com/10.1.0.1 準備用於驗證的網頁伺服器，因為伺服器會有各種需求，以下為簡易的範例，實際上的驗證伺服器並不會這麼簡單 本次實驗使用的網頁後端為 Python 的 Flask，其它框架理論上也可以做到相同的事 驗證伺服器和普通的網頁服務一樣，所有該注意的漏洞一樣也需要注意，而且因為其特殊性更需要注意，下方這個案例就說明了不正確的設定會造成什麼樣的狀況 漏洞案例 確定 Dnsmasq、iptables、熱點、驗證伺服器都已經啟動，此時連線後應該會自動跳轉到驗證伺服器，再輸入帳號密碼後則會連線成功 結論 強制門戶可以在 2024 年已經不在那麼的常見，大部分的學校都已經改為 WAP2-Enterprise 這種驗證方式，雖然這樣的驗證方式在錯誤的配置方式仍然充滿了漏洞，但這還是比強制門戶好了很多，因為強制門戶相對有比較多的漏洞可以繞過驗證。\n這次的實驗我花了很多時間在除錯上，也是第一次知道強制門戶是怎麼樣做到在連入的時候跳出登入畫面的，算是解答了我多年前的疑惑。\n","date":"2024-09-14T21:00:00+08:00","permalink":"https://worldofwheat.github.io/p/captive-portal-%E5%AF%A6%E9%A9%97/","title":"Captive Portal 實驗"},{"content":"不管在 Zerojudge、 Codeforces 等平台上有許多的練習題。這題題目都是由前人花很多時間準備出來的，但也因為出題成本的降低，因此常常出現題述未清楚標示或者測資有問題的題目。\n下方是我在出了幾次題目，並且整合其它出題者的習慣整理而成的。下方會把一個題目的核心部分拆開，並且寫出每項應注意的事項，供您參考。\n題述 中文排版請遵照中文文案排版指北 數學式請使用 Latex 語法，大部分的 OJ 都應該支援 Latex 語法 雖然常常出現只有一個英文代號的段落，但為了題述整齊請也使用 Latex 輸入 錯誤：第一行包含一個正整數 n。 正確：第一行包含一個正整數 $n$。 乘法符號為 $\\cdot$ 或者 $\\times$，不是 $*$ 錯誤：$5*3=15$ 正確：$5 \\times 3 = 15$ 正確：$5 \\cdot 3 = 15$ 輸入格式應清楚標示 不應使用例如「數字」、「數值」等模凌兩可模的詞 整數範圍 $(-\\infty,\\infty)$ 正整數範圍 $[0,\\infty)$ 負整數範圍 $(\\infty,0]$ 假設第一行會輸入一個 $n \\in [1, 100]$ 錯誤：第一行輸入一個數字 錯誤：第一行輸入一個數值 錯誤：第一行輸入一個變數 正確：第一行輸入一個正整數 每行有幾個輸入，輸入是什麼格式（正整數、負整數、整數、小數） 每一個輸入對應到題述的意義務必要清楚標示 測資範圍應清楚標示 假設輸入一個 $n \\in [1, 2 \\times 10^5]$ 錯誤：$n$ 很大 錯誤：$n$ 為 int 裝的下的範圍 錯誤：$n \\leq 2 \\times 10^5$ 正確：$1 \\leq n \\leq 2 \\times 10^5$ 使用到特定字串輸入，應寫明會有哪些字串。 假設輸入包含一個字串 $s$，代表 \u0026ldquo;add\u0026rdquo;, \u0026ldquo;query\u0026rdquo; 這兩個操作 正確：$s \\in {\\text{\u0026ldquo;add\u0026rdquo;}, \\text{\u0026ldquo;query\u0026rdquo;}}$ 若題目為多筆測資一定要標示 例如 本題為多筆測資 若題目要使用特定的輸入做為結尾，請一定要標示 例如 輸入 $0$ 代表輸入結束 分段給分規則應清楚標示 若某一段測資有附加條件（例如需要通過範例測資），則應在配分欄標示 例如 附加條件：通過範測 每一段測資範圍應在配分欄標示 例如 測資範圍：$1 \\leq n \\leq 2 \\times 10^5$ 測資範圍：題目範圍 測資 需滿足題述的限制 例如 $n \\leq 500$，那就不能出現 $n=501$ 的狀況，就算解答程式可以給出相對應的輸出也不行 一定要將題目給定的限制出滿 例如 $0 \\leq n \\leq 500$ 就至少要各有有一筆測資為 $n = 0$ 和 $n=500$。 假設有兩個主要變數 $n,m$ 則這兩個變數都應該要有最大和最小的組合 主要變數指的是會去變動到時間複雜度的參數 除非是特殊題目，否則測資數量不能太少。如果測資數量不夠很容易被特判 個人建議至少 $20$ 筆以上 如果需要分段給分，請確保每一個分段都有對應的測資 注意 IO 速度問題，太慢會 TLE IO 優化沒辦法保證所有寫題目的人都知道，如果題目需要 IO 優化才能過，則請自行斟酌 因為題目可能會有各種程式語言，IO 優化技巧請自行上網查詢 解答程式 至少需要有兩份完全獨立的解答程式可以得到相同的結果 最好是找到其它人幫忙驗題，如果沒有可以自行寫兩份解答驗證 如果有使用分段給分，至少每一種分段都寫一份程式碼，確定只能拿到對應的分數 在確定解答正確之後，可以試著修改程式，確定測資可以找出有錯誤的程式 小技巧 若一個題目為分段給分，則可以寫一份滿分的解答程式，再寫一份僅部份分的程式，則只需要比對部份分兩份解答是否一樣，大該就能確定解答的正確性。\n","date":"2024-07-13T00:00:00+08:00","permalink":"https://worldofwheat.github.io/p/%E6%BC%94%E7%AE%97%E6%B3%95%E5%87%BA%E9%A1%8C%E6%8C%87%E5%8D%97/","title":"演算法出題指南"},{"content":"我的手機不知道在哪一年的更新之後，內建的 VPN 就只剩下 IKEv2/IPsec 這種方式了，又不知道在哪天我就開始想要自己架一個 VPN 伺服器，2024 年的寒假我就開始研究怎麼樣用 VPN 連線回家。\n因為系統是 Linux，第一個在網路上找到的就是 strongSwan 這套軟體，然後又找了一下網路上的教學，但我照著教學不知道為什麼就是連線不了，憑證也是簽了又刪無數次。但我沒有因此放棄，我直接去看官方文件，官方的文件都是用 swanctl 設定檔的格式寫的，我本來還堅持用 strongSwan 的預設格式，因為網路上的教學撰寫的時間久遠，我最一開始接觸到的就是如此，但在試用之後才發現 swanctl 的設定檔更加的人性化，比原本的格式不知道好了多少。strongSwan 官方還給出了大部分設定的範例，應該百分之九十的情況都可以處理。\n因此我決定寫一篇相對比較新的教學，也算是做個紀錄，給未來想要架設的人有個方向。\n概要 以下是我自己整理的重點：\nIPsec 用於保護兩個節點之間的資料傳輸，使用 UDP 協議傳輸 IPsec 在開始傳輸之前需要先進行金錀協商和身份驗證，而實作方法常見的有 L2TP 或 IKEv2，因此常常可以在手機看到 L2TP/IPsec 或 IKEv2/IPsec，而 strongSwan 提供的是 IKEv2/IPsec IKEv2 分為兩步 第一步兩個節點會協商出保護第二步的密鑰和後續必要的資訊 第二步會進行身份驗證及協商出 IPsec 的密鑰，此時的封包受到第一步協商出的密鑰加密 理論上不存在伺服端跟客戶端，但實際上還是會有一端當成伺服器 伺服端跟客戶端都需要設定驗證方式，只有在兩邊都驗證通過才能連線 驗證方式有憑證、EAP、PSK 三種，EAP 在易用性跟安全性上取得了平衡 EAP 如果想要也可以用第三方伺服器驗證（RADIUS） 伺服器一般來說都會用憑證做為自身的憑證方式，手機版 strongSwan 客戶端也只能連線使用憑證驗證的伺服器 連接握手 下方使用設定如下：\n伺服器為憑證驗證 客戶端為 EAP 驗證 IKEv2 握手有四步：\n客戶端對伺服器握手 伺服器返回握手，如果有開啟憑證請求會在這一步傳送 客戶端返回對應的驗證方式，這裡是 EAP。若有開啟憑證請求也會一同傳送 伺服器返回憑證 在握手的前兩步雙方會協商出密鑰保護第三步和第四步 憑證請求的目地在於雙方皆可以設定不主動傳送憑證，若不主動傳送則需要憑證請求才能得到憑證 例如 Windows 或 strongSwan-network-manager 皆不會主動傳送憑證 憑證請求較消耗流量，可以自行決定是否開啟 參考資料\n架設 以下是我自己整理的重點：\n如果使用 Docker 要開始 privileged 才能使用 strongswan 需要在 ipsec 這個套件上面運作，在安裝 strongswan 的時候會自動連同 ipsec 一起安裝 新版的 strongswan 使用 swanctl 來管理各種設定，網路上有些教學使用僅 strongSwan 的設定檔，兩者功能相同 架設需要安裝套件，下方列出的套件皆可使用 apt 安裝 iptables 流量轉發用，不裝僅能連線但沒有網路 strongswan 核心 strongswan-swanctl 管理 strongswan 的設定檔等，強烈推薦使用 strongswan-pki 可由 OpenSSL 替代 libstrongswan-extra-plugins 加解密等等的算法套件 若直接安裝套件有些功能無法使用，例如 TPM 等等，因此特殊功能需要自行編譯 需要準備伺服器用的憑證 伺服器的封包轉發和 iptables 流量轉發要設定才能連到外網 憑證 以下是我自己整理的重點：\n一定要先懂基本的 PKI，可以參考這部影片 能不自簽就不自簽，因為細節非常多，一個不小心就不能連線 我自己測試了網路上申請的憑證 Buypass、Let\u0026rsquo;s Encrypt 皆沒有問題 從網路上申請的憑證一定需要域名，換句話說不想自簽就一定需要有域名 如果客戶端要使用憑證做為驗證，除非客戶端有辦法從網路上申請到憑證，否則一定需要自簽 申請憑證重點如下：\n一定需要域名，沒有域名無法申請 推薦 Let\u0026rsquo;s Encrypt 的憑證，註冊方法可以參考官方文件 自動化申請可以使用 Certbot，使用方法可以參考官方文件，這個是最簡單的方法 自簽憑證重點：\n如果沒有域名，則自簽憑證內容的所有域名都以 IP 代替\n手機版 strongSwan 跟 Windows 當客戶端連線對憑證各自不同的要求，自簽一定需要注意\n需要準備根憑證，只有被根憑證簽屬的憑證才可以被信任，因此根憑證的私鑰強烈建議要加密\n假設客戶端使用自簽憑證做為驗證手段，則伺服端一定要有根憑證才可以驗證，反之亦然 所有憑證需要是 X509v3 的版本才能使用，因為需要有一些額外的資訊用於驗證\n過程中所有的金鑰生成請使用 RSA 或 ECDSA，因為本人在測試時發現會發生錯誤\n我僅在 Zenfone 8 和 Windows 10 上進行測試，其它系統因為我也沒有，所以無法測試 Android 和 Windows 憑證安裝使用 PKCS#12 格式\nCN 和 SAN 一定要設定成域名，缺一不可\nExtended Key Usage 需要有 TLS Web Server Authentication\n伺服器憑證我推薦使用 OpenSSL 簽發，因為需要比較多細項，建議使用設定檔或 pki 生成\n伺服器憑證設定檔範例 ```plaintext [ req ] prompt = no # 天數 days = 30 distinguished_name = req_distinguished_name req_extensions = v3_req [ req_distinguished_name ]\n根域名 commonName = worldofwheat.us.to\n[ v3_req ] basicConstraints = critical, CA:FALSE extendedKeyUsage = serverAuth subjectAltName = @sans\n[ sans ]\nIKEv2 主要驗的就是下面的值，可以新增多筆紀錄 DNS.0 = worldofwheat.us.to DNS.1 = vpn.worldofwheat.us.to\nDNS.1 = test.worldofwheat.us.to 1 \u0026lt;/details\u0026gt; 常用指令如下，OpenSSL 和 pki 指令功能相同：\n過程中需要動用到很多指令的操作。strongSwan 官方有給出 pki 這套工具，也可以使用 OpenSSL 代替 生成私鑰 openssl genpkey -outform pem -algorithm rsa -pkeyopt rsa_keygen_bits:4096 -quiet -out \u0026lt;私鑰路徑\u0026gt; pki --gen --type rsa --size 4096 --outform pem \u0026gt; \u0026lt;私鑰路徑\u0026gt; 如果私鑰需要加密，則可以在 OpenSSL 的指令內加上 -aes256 來啟用 識別名稱只需要填寫 CN 就足夠了，如果有其它欄位需求在按照相同的格式填入 根憑自簽指令如下： 根憑證一般有效時間都會比較長，下方範例為 3650 天 OpenSSL ```bash openssl req -key \u003c根憑證私鑰路徑\u003e -out \u003c憑證路徑\u003e \\ -x509 -days 3650 -subj /C=NO/ ``` pki ```bash pki --self --in \u003c根憑證私鑰路徑\u003e \\ --type priv --outform pem --lifetime 3650 \\ --dn \"CN=域名\" \u003e \u003c憑證路徑\u003e ``` 簽發憑證指令如下： OpenSSL OpenSSL 需要先有 CSR 才能簽憑證，因此分為兩步 ```bash openssl req -new -key \u003c私鑰路徑\u003e -out -config \u003c設定檔路徑\u003e openssl req -x509 -in -out \u003c憑證路徑\u003e -CA \u003c根憑證路徑\u003e -CAkey \u003c根憑證私鑰路徑\u003e ``` pki ```bash pki --pub --in \u003c私鑰路徑\u003e | \\ pki --issue --cakey \u003c根憑證私鑰路徑\u003e --cacert \u003c根憑證路徑\u003e \\ --dn \"CN=域名\" --lifetime \u003c有效天數\u003e \\ --flag serverAuth --outform pem \u003e \u003c憑證路徑\u003e.pem ``` 查看憑證資訊 openssl x509 -in \u0026lt;憑證路徑\u0026gt; -text -noout pki --print --in \u0026lt;憑證路徑\u0026gt; 設定檔 下方僅給出本人使用過的範例，更多範例可以參考(官方文件)[https://docs.strongswan.org/docs/5.9/config/IKEv2.html]\n配置資料夾預設位於 /etc/swanctl/ 底下\n設定檔放在 conf.d/ 底下，需要自行創建檔案 設定檔副檔名為 .conf 可以有多組設定檔，並且所有設定檔都會在開啟時讀取 憑證放在 x509/ 底下 私鑰放在 private/ 底下 憑證和私鑰需要對應才能使用，缺一不可 根憑證放在 x509ca 底下 憑證鏈可以包成一個檔案放入 Windows 對於 IKEv2 握手算法有限制，可以參考下方的列表\n可用選項 3DES 系列 3des-sha1-prfsha1-modp1024 3des-sha256-prfsha256-modp1024 3des-sha384-prfsha384-modp1024\nAES CBC 系列 aes128-sha1-prfsha1-modp1024 aes128-sha256-prfsha256-modp1024 aes128-sha384-prfsha384-modp1024 aes192-sha1-prfsha1-modp1024 aes192-sha256-prfsha256-modp1024 aes192-sha384-prfsha384-modp1024 aes256-sha1-prfsha1-modp1024 aes256-sha256-prfsha256-modp1024 aes256-sha384-prfsha384-modp1024\nAES GCM 系列 aes128gcm128-prfsha1-modp1024 aes128gcm128-prfsha256-modp1024 aes128gcm128-prfsha384-modp1024 aes256gcm128-prfsha1-modp1024 aes256gcm128-prfsha256-modp1024 aes256gcm128-prfsha384-modp1024\n範例 下方會給出最基本的設定檔範例，可以按照範例修改 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 connections { rw-eap-mschapv2 { version = 2 # 是否傳送憑證給終端，一定要開啟，因為這裡使用 PKI 進行身份驗證 # 可選 never、ifasked、always # never：不傳送 # ifasked：收到憑證請求才傳送 # always：主動傳送 # 預設為 ifasked send_cert = always # 是否傳送憑證請求 # 預設為 yes send_certreq = no # 如果資料比較大，是否要進行分割 # 可選 yes、accept、force、no # yes：只要對方同意則資料進行分割 # accept：本身的資料不分割，但通知對方可以接收資料分割 # force：所有資料皆分割 # no：自已不分割，並且告知對方不可分割 # 預設為 yes fragmentation = yes # 指定 DHCP 池 pools = rw_pool # IKEv2 加密算法 # 可以選擇多個加密算法，使用逗號分開 # 需要注意 Windows 和 strongSwan-network-manager proposals = chacha20poly1305-prfsha512-modp4096,aes256gcm128-prfsha256-modp1024,aes256-sha1-prfsha1-modp4096 # 是否允許多個客戶端 # 預設為 yes mobike = yes # 伺服器驗證 local { auth = pubkey # 憑證名稱 certs = test-server.crt # 填入連接時的域名或者 IP id = vpn.worldofwheat.cloudns.ch } # 客戶端驗證 remote { # 客戶端驗證方式，可以參考官方文件 auth = eap-mschapv2 id = %any } # IPsec 選項 children { rw-eap-mschapv2 { local_ts = 0.0.0.0/0 # 加密算法 esp_proposals = chacha20poly1305,aes256-sha1,aes256gcm128 } } } } # DHCP 池 pools { rw_pool { addrs = 192.168.10.0/24 } } # 機密資訊 secrets { # 處理加密過的私鑰 private-server { file = \u0026#34;private.key\u0026#34; secret = XXXXXX } # 設定一個 EAP 帳號 eap-Alice { id = Alice secret = XXXXX } } 指令操作 如何 Debug 第一件事是先學會 IKEv2/IPsec 連線時候的握手協議，我推薦這篇，只有學會了握手協議下面提到的工具才有用。\ndebug 一定要會的方法：\nswanctl \u0026ndash;log swanctl 提供的指令，可以讓連線過程中的所有封包都紀錄下來 手機版 strongSwan 原生的 UI 沒有辦法提供 log，基本上完全沒辦法 debug Windows 事件檢視器 Windows 問題很多而且 debug 相對困難，連線出現問題的時候只會給出沒有任何幫助的訊息。事件檢視器可以給出錯誤碼，可以到網路上查找對應的問題。 ","date":"2024-07-12T21:00:00+08:00","permalink":"https://worldofwheat.github.io/p/strongswan-%E5%AF%A6%E9%A9%97/","title":"StrongSwan 實驗"}]